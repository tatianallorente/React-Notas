{"version":3,"sources":["img/arrows_circle_plus.svg","components/Formulario.js","img/basic_trashcan.svg","img/basic_pin2.svg","components/Nota.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearNota","useState","titulo","creador","fecha","hora","descripcion","nota","actualizarNota","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","class","src","arrows_circle_plus","alt","eliminarNota","basic_pin2","onClick","basic_trashcan","App","notasIniciales","JSON","parse","localStorage","getItem","notas","guardarNotas","useEffect","setItem","stringify","nuevasnotas","filter","length","map","Nota","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30fd9bba.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/arrows_circle_plus.efbde8d7.svg\";","import React, { Fragment, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n// Sirve para indicar el tipo de los componentes (array, string, etc)\r\nimport PropTypes from 'prop-types';\r\n\r\n// Iconos\r\nimport arrows_circle_plus from '../img/arrows_circle_plus.svg';\r\n\r\nconst Formulario = ({crearNota}) => {\r\n\r\n    // Crear State de notas\r\n    const [nota, actualizarNota] = useState(\r\n        // llaves porque es un objeto\r\n        {\r\n        titulo: '',\r\n        creador: '',\r\n        fecha: '',\r\n        hora: '',\r\n        descripcion: ''\r\n        }\r\n    )\r\n\r\n    // Crear State de errores\r\n    const [error, actualizarError] = useState( false )\r\n\r\n\r\n    // Función que se ejecuta cada vez que el usuario escribe en un input\r\n    const actualizarState = e => {\r\n        // console.log(e.target.name);\r\n        // console.log(e.target.value); \r\n        actualizarNota({\r\n            // Primero hay que hacer una copia del State para no perder la referencia,sino, cada campo sobreescribiría el anterior y solo tendriamos el valor de uno (para la copia usamos el spread operator)\r\n            ...nota,\r\n            [e.target.name]: e.target.value\r\n        })   \r\n    }\r\n\r\n    // Extraer los valores\r\n    // Con esto evitamos tener que escribir nota.titulo etc\r\n    const { titulo, creador, fecha, hora, descripcion } = nota;\r\n\r\n    // Enviar formulario submit\r\n    const submitNota = e => {\r\n        e.preventDefault();\r\n        //console.log('enviando form');\r\n        \r\n        // Validar\r\n        if (titulo.trim() === '' || creador.trim() === '' \r\n            || fecha.trim() === '' || hora.trim() === '' || descripcion.trim() === ''){\r\n            actualizarError(true);\r\n            return; // Para que no continue ejecutando el código           \r\n        }\r\n\r\n        // Eliminar el mensaje de error previo, en caso de haberlo\r\n        actualizarError(false);\r\n\r\n        // Asignar un ID (no tenemos BBDD, así que usamos la librería uuid)\r\n        nota.id = uuidv4();\r\n        \r\n\r\n        // Crear la nota\r\n        crearNota(nota);\r\n\r\n        // Reiniciar el form\r\n        actualizarNota(\r\n            {\r\n                titulo: '',\r\n                creador: '',\r\n                fecha: '',\r\n                hora: '',\r\n                descripcion: ''\r\n            }\r\n        )      \r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear nota</h2>\r\n\r\n            { error ? <p className=\"msg-error\">Todos los campos son obligatorios</p>: null }\r\n\r\n            <form\r\n                onSubmit={submitNota}\r\n            >\r\n\r\n                <label>Título de la nota</label>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"titulo\"\r\n                    className=\"u-full-width\" \r\n                    placeholder=\"Ej: Mi primera nota\" \r\n                    onChange={actualizarState}\r\n                    value={titulo}\r\n                />\r\n\r\n                <label>Usuario</label>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"creador\"\r\n                    className=\"u-full-width\"  \r\n                    placeholder=\"Ej: Tatiana Llorente\"  \r\n                    onChange={actualizarState}\r\n                    value={creador}\r\n                />\r\n\r\n                <div class=\"row\">\r\n                    <label className=\"six columns\">Fecha</label>\r\n                    <label className=\"six columns\">Hora</label>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <input \r\n                        type=\"date\" \r\n                        className=\"six columns\"\r\n                        name=\"fecha\" \r\n                        onChange={actualizarState}\r\n                        value={fecha}\r\n                    />  \r\n                    <input \r\n                        type=\"time\" \r\n                        className=\"six columns\"\r\n                        name=\"hora\"  \r\n                        onChange={actualizarState}\r\n                        value={hora}\r\n                    />\r\n                </div>\r\n\r\n                <label>Descripción</label>\r\n                <textarea \r\n                    className=\"u-full-width\"\r\n                    name=\"descripcion\" \r\n                    onChange={actualizarState}\r\n                    value={descripcion}\r\n                ></textarea>\r\n           \r\n                \r\n                <button type=\"submit\" className=\"boton-submit\">\r\n                    <span>Crear nota</span>\r\n                    <img src={arrows_circle_plus} alt={arrows_circle_plus} class=\"iconos\"/>               \r\n                </button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\n// PropTypes (documentación)\r\nFormulario.propTypes = {\r\n    crearNota: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Formulario;","export default __webpack_public_path__ + \"static/media/basic_trashcan.8f89f389.svg\";","export default __webpack_public_path__ + \"static/media/basic_pin2.d0b9deaf.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Iconos\r\nimport basic_trashcan from '../img/basic_trashcan.svg';\r\nimport basic_pin2 from '../img/basic_pin2.svg';\r\n\r\nconst nota = ({nota, eliminarNota}) => (\r\n    <div className=\"nota\">\r\n        <div>\r\n            <img src={basic_pin2} alt={basic_pin2} class=\"pin\"/> \r\n            <p>Título: <span>{nota.titulo}</span> </p>\r\n            <p>Creador: <span>{nota.creador}</span> </p>\r\n            <p>Fecha: <span>{nota.fecha}</span> </p>\r\n            <p>Hora: <span>{nota.hora}</span> </p>\r\n            <p>Descripción: <span>{nota.descripcion}</span> </p>\r\n        </div>\r\n        <div>\r\n            <button \r\n                onClick={() => eliminarNota(nota.id)}\r\n                type=\"button\" \r\n                className=\"button eliminar u-full-width\">\r\n                <span>Eliminar nota</span>\r\n                <img src={basic_trashcan} alt={basic_trashcan} class=\"iconos\"/>  \r\n            </button>\r\n        </div>\r\n    </div>\r\n);\r\n \r\n\r\n// PropTypes\r\nnota.propTypes = {\r\n    nota: PropTypes.object.isRequired,\r\n    eliminarNota: PropTypes.func.isRequired\r\n}\r\n  \r\n\r\nexport default nota;","import React, { Fragment, useState, useEffect } from 'react';\r\nimport Formulario from './components/Formulario';\r\nimport Nota from './components/Nota';\r\n\r\nfunction App() {\r\n\r\n    // Notas en el localStorage (solo admite strings)\r\n    let notasIniciales = JSON.parse(localStorage.getItem('notas'));\r\n    if (!notasIniciales) {\r\n        notasIniciales = [];\r\n    }\r\n\r\n    // Array con todas las notas\r\n    const [notas, guardarNotas] = useState([]);\r\n\r\n    // UseEffect para realizar ciertas tareas cuando el State cambie\r\n    // Es como el document.ready de jQuery, detecta cuando la página se ha cargado y también cuándo se ha actualizado algún State. También es como el antiguo componentDidMount()\r\n    /*\r\n    useEffect( () => {\r\n        console.log('listo');\r\n    }, [] ); // Le pasamos un array vacío [] para que solo se ejecute una vez\r\n    */\r\n\r\n    useEffect( () => {\r\n        // console.log('listo');\r\n        // Guardar las notas en localSotrage \r\n        let notasIniciales = JSON.parse(localStorage.getItem('notas'));\r\n        \r\n        if (notasIniciales) {\r\n            localStorage.setItem('notas', JSON.stringify(notas));\r\n        } else {\r\n            localStorage.setItem('notas', JSON.stringify([]));\r\n      }\r\n      \r\n  }, [notas] ); // Cuando el State de una nota cambie, entrará en esta función\r\n\r\n\r\n    // Función que obtenga las notas actuales y agregue la nueva\r\n    const crearNota = nota => {\r\n        //console.log(nota);\r\n        guardarNotas(\r\n            [\r\n                ...notas,\r\n                nota\r\n            ]\r\n        );\r\n    }\r\n\r\n    // Función para borrar notas por su id\r\n    const eliminarNota = id => {\r\n        //console.log(id);\r\n        const nuevasnotas = notas.filter(nota => nota.id !== id);\r\n        guardarNotas(nuevasnotas);\r\n    }\r\n\r\n    // Mensaje condicional\r\n    //console.log('notas.length');\r\n    const titulo = notas.length === 0 ? 'No hay notas': 'Administra tus notas';\r\n    \r\n\r\n    return (\r\n        <Fragment>\r\n            <h1>Gestor de notas</h1>\r\n\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"one-half form-notas\">\r\n                        <Formulario\r\n                            crearNota={crearNota}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <h2>{titulo}</h2>\r\n                    <div className=\"lista-notas\">\r\n                        {notas.map(nota => (\r\n                            <Nota\r\n                                key={nota.id}\r\n                                nota={nota}\r\n                                eliminarNota={eliminarNota}\r\n                                className=\"nota\"\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}